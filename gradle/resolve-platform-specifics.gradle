/**
 * Usage:
 *   resolvePlatformSpecifics("some.property.multi")
 *
 * Example in gradle.properties:
 *   org.gradle.java.home.multi=windows:C:\\Java\\jdk-21,linux:/usr/lib/jvm/java-21
 *   org.gradle.java.installations.paths.multi=windows:%JAVA_HOME%,linux:$JAVA_HOME
 *
 * This sets:
 *   org.gradle.java.home = [resolved path]
 *   
 * Environment variables in paths (like %VARIABLE% on Windows or $VARIABLE on Linux) 
 * will be expanded automatically.
 */

def resolvePlatformSpecifics = { String multiPropertyKey, String suffix = '.multi' ->
    def osName = System.getProperty("os.name").toLowerCase()
    def osKey = osName.contains("win") ? "windows" :
            osName.contains("mac") ? "mac" :
                    osName.contains("nix") || osName.contains("nux") ? "linux" : "unknown"

    def keyToUse = multiPropertyKey.endsWith(suffix) ? multiPropertyKey : multiPropertyKey + suffix

    def raw = project.findProperty(keyToUse) as String
    if (!raw) {
        logger.warn("⚠️ Property '$keyToUse' not defined. Ignored.")
        return
    }

    def entries = raw.split(",")*.trim()

    def invalidEntries = []
    entries.eachWithIndex { entry, index ->
        if (!entry || entry.startsWith("#")) return // Skip empty or comment-like
        def parts = entry.split(":", 2)
        if (parts.length != 2 || !parts[0] || !parts[1]) {
            invalidEntries << "  Line ${index + 1}: '$entry'"
        }
    }

    if (!invalidEntries.isEmpty()) {
        throw new GradleException(
                "❌ Invalid format in '${keyToUse}': expected entries like 'os:path'.\n" +
                        "Please fix the following:\n" +
                        invalidEntries.join("\n")
        )
    }

    def expandEnvironmentVariables = { String path ->
        def currentOs = System.getProperty("os.name").toLowerCase()
        def isWindows = currentOs.contains("win")
        
        // Step 1: Replace environment variables based on OS
        def expandedPath = path
        
        if (isWindows) {
            // Handle Windows-style environment variables: %VARIABLE%
            def matcher = path =~ /%([^%]+)%/
            while (matcher.find()) {
                def envVar = matcher.group(1)
                def envValue = System.getenv(envVar)
                if (envValue != null) {
                    expandedPath = expandedPath.replace("%${envVar}%", envValue)
                }
            }
        } else {
            // Handle Unix-style environment variables: $VARIABLE or ${VARIABLE}
            def simpleVarPattern = ~/\$([a-zA-Z_][a-zA-Z0-9_]*)/
            def bracedVarPattern = ~/\$\{([a-zA-Z_][a-zA-Z0-9_]*)\}/
            
            // Replace ${VAR} style variables
            def bracedMatcher = bracedVarPattern.matcher(expandedPath)
            while (bracedMatcher.find()) {
                def envVar = bracedMatcher.group(1)
                def envValue = System.getenv(envVar)
                if (envValue != null) {
                    expandedPath = expandedPath.replace("\${${envVar}}", envValue)
                }
            }
            
            // Replace $VAR style variables
            def simpleMatcher = simpleVarPattern.matcher(expandedPath)
            while (simpleMatcher.find()) {
                def envVar = simpleMatcher.group(1)
                def envValue = System.getenv(envVar)
                if (envValue != null) {
                    expandedPath = expandedPath.replace("\$${envVar}", envValue)
                }
            }
        }
        
        // Step 2: Normalize path to handle relative paths like '..' and '.'        
        try {
            def file = new File(expandedPath)
            return file.canonicalPath
        } catch (Exception e) {
            // If we can't canonicalize, return the expanded path as is
            logger.debug("Could not canonicalize path: $expandedPath. Using as is. Error: ${e.message}")
            return expandedPath
        }
    }

    
    def selected = entries
            .find { entry ->
                def (key, value) = entry.split(":", 2)
                def expandedValue = expandEnvironmentVariables(value)
                key.equalsIgnoreCase(osKey) && new File(expandedValue).exists()
            }

    if (selected) {
        def (os, value) = selected.split(":", 2)
        def expandedValue = expandEnvironmentVariables(value)
        def targetProperty = keyToUse.replaceFirst(/${suffix}$/, "")
        println "✅ Resolved $targetProperty for $osKey: $expandedValue (original: $value)"
        System.setProperty(targetProperty, expandedValue)
    } else {
        logger.warn("⚠️ No matching path found in '$keyToUse' for OS '$osKey'")
    }
}

ext.resolvePlatformSpecifics = resolvePlatformSpecifics
