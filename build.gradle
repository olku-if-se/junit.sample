import org.fusesource.jansi.Ansi

import java.text.MessageFormat

plugins {
    id 'java'
    id 'jacoco'
    id 'org.gosu-lang.gosu' version '+'
    id 'idea'
}

// helper scripts
apply from: "$rootDir/gradle/resolve-platform-specifics.gradle"
apply from: "$rootDir/gradle/task-graph-publisher.gradle"
apply from: "$rootDir/gradle/offline-local-maven-repo.gradle"

resolvePlatformSpecifics("org.gradle.java.home.multi")
resolvePlatformSpecifics("org.gradle.java.installations.paths")

def localRepoPath = System.getenv('LOCAL_M2_REPO') ?: "${rootDir}/repository"
println "Using local Maven repository at: $localRepoPath"

repositories {
    maven { url project.file(localRepoPath) }
    mavenCentral()
}

group = 'org.example'
version = '1.0-SNAPSHOT'
description = 'Gosu Junit Gradle Project Example'

// force Java 11 for project code (stay close to Guidewire environment)
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor.set(JvmVendorSpec.AMAZON)
    }
    targetCompatibility = 11
    sourceCompatibility = 11
}
compileJava.options.release = 11

// Include Gosu source sets Into Compilation Process
sourceSets {
    main {
        gosu {
            srcDirs = ['src/main/gosu']
            filter.include '**/*.gs', '**/*.gsx', '**/*.gst', '**/*.gsp'
            filter.excludes = []
        }
    }
    test {
        gosu {
            srcDirs = ['src/test/gosu']
            filter.include '**/*.gs', '**/*.gsx', '**/*.gst', '**/*.gsp'
            filter.excludes = []
        }
    }
}

dependencies {
    // Gosu Language dependencies
    implementation('org.gosu-lang.gosu:gosu-core:+')
    testImplementation('org.gosu-lang.gosu:gosu-test:+')

    // JUnit 5 dependencies
    testImplementation platform('org.junit:junit-bom:5.13.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // JUnit 4 compatibility
    testImplementation("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // JUnit 5 extensions (latest: 2.3.0)
    testImplementation 'org.junit-pioneer:junit-pioneer:+'

    // Mocks, https://site.mockito.org/
    testImplementation "org.mockito:mockito-core:5.+"

    // Http Client (by default it will use the JDK HttpClient without JSON parsing)
    implementation 'io.github.openfeign:feign-core:13.6'

    // e2e, Test web server for HTTP tests
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'

    // JSON Schema validation (used for JSON validation and contract testing)
    testImplementation 'com.github.erosb:everit-json-schema:1.14.6'
}

// Task to verify sources and javadoc resolution behavior
tasks.register("verifySourcesJavadoc") {
    group = "verification"
    description = "Verify sources and javadoc resolution behavior for dependencies"

    doLast {
        println "\n=== VERIFICATION: Sources and Javadoc Resolution ==="

        // Test with OkHttp which we know has sources and javadoc published
        def testDependency = "com.squareup.okhttp3:okhttp:4.12.0"
        println "\nTesting dependency: $testDependency"

        println "\n1. MANUAL RESOLUTION TEST (current script approach):"
        def depConf = configurations.detachedConfiguration(
                dependencies.create("${testDependency}@pom"),
                dependencies.create("${testDependency}:sources@jar"),
                dependencies.create("${testDependency}:javadoc@jar")
        )
        try {
            depConf.resolve().each { file ->
                println "  ✓ ${file.name} (${file.length()} bytes)"
            }
        } catch (Exception e) {
            println "  ✗ ERROR: ${e.message}"
        }

        println "\n2. GRADLE VARIANT-AWARE RESOLUTION TEST:"

        // Test sources resolution using Gradle's variant-aware dependency resolution
        def sourcesConf = configurations.detachedConfiguration()
        sourcesConf.attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, DocsType.SOURCES))
        }
        sourcesConf.dependencies.add(dependencies.create(testDependency))

        try {
            sourcesConf.resolve().each { file ->
                println "  ✓ SOURCES: ${file.name} (${file.length()} bytes)"
            }
        } catch (Exception e) {
            println "  ✗ SOURCES ERROR: ${e.message}"
        }

        // Test javadoc resolution
        def javadocConf = configurations.detachedConfiguration()
        javadocConf.attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, DocsType.JAVADOC))
        }
        javadocConf.dependencies.add(dependencies.create(testDependency))

        try {
            javadocConf.resolve().each { file ->
                println "  ✓ JAVADOC: ${file.name} (${file.length()} bytes)"
            }
        } catch (Exception e) {
            println "  ✗ JAVADOC ERROR: ${e.message}"
        }

        println "\n=== CONCLUSION ==="
        println "If you see errors above, it confirms that Gradle's default"
        println "dependency resolution doesn't automatically include sources/javadoc."
        println "The stageDependencies task needs to be enhanced to properly resolve these artifacts."
    }
}

test {
    useJUnitPlatform()

    jacoco {
        enabled = true
        includes = ['**/*']
    }

    testLogging {
        events("failed")
        showStandardStreams = true // show STDOUT and STDERR in the terminal output
    }

    finalizedBy(jacocoTestReport)

    // Custom test result logging with timing feedback
    afterTest { desc, result ->
        def duration = result.endTime - result.startTime
        def resultType = result.resultType.toString()

        def resultColor = resultType == "SUCCESS" ? Ansi.Color.GREEN :
                resultType == "SKIPPED" ? Ansi.Color.YELLOW : Ansi.Color.RED

        def timeColor = duration > 5000 ? Ansi.Color.RED :
                duration >= 1000 ? Ansi.Color.YELLOW : Ansi.Color.GREEN

        def template = new MessageFormat(Ansi.ansi()
                .a("Test ")
                .bold().a("{0}").boldOff()
                .a(" > ")
                .fgBrightDefault().a("{1}").reset()
                .a(" - ")
                .fg(resultColor).a("{2}").reset()
                .a(", took: ")
                .fg(timeColor).a("{3} ms")
                .reset().toString())

        println template.format([desc.className, desc.methodName, resultType, duration].toArray())

        // on failure we should print STDOUT and STDERR of the test
        if (resultType == "FAILED") {
            println "STDOUT:\n${result.standardOutput}"
            println "STDERR:\n${result.errorOutput}"
        }
    }
}

jacocoTestReport {
    dependsOn test // Ensure tests are run before generating the report

    reports {
        xml.required = !project.hasProperty("NoReports")
        csv.required = !project.hasProperty("NoReports")
        html.required = !project.hasProperty("NoReports")
    }
}

tasks.withType(Test).configureEach {
    if (project.hasProperty("NoReports")) {
        reports.junitXml.required = false
        reports.html.required = false
    }
}

// Gosu Configuration
compileGosu {
    // TBD: Gosu compiler options can be set here
    gosuOptions.verbose = true

    // include Java classpath in Gosu compilation, so we can reference Java classes in Gosu Code
    // classpath += files(tasks.named('compileJava').get().destinationDir)
}

compileTestGosu {
    // TBD: Gosu test compiler options can be set here

    // include Java test classes into Gosu test compilation, so we can reference Java classes in Gosu Test Code
    // classpath += files(tasks.named('compileTestJava').get().destinationDir)
}

gosudoc {
    // TBD: Gosu documentation options can be set here
}

// Configure IDEA to recognize Gosu source directories
idea {
    module {
        sourceDirs += file('src/main/gosu')
        testSources.from(file('src/test/gosu'))
    }
}

// examine the order of classes in the classpath
tasks.register('printTestClassPath') {
    doLast {
        def testClassPath = sourceSets.test.runtimeClasspath.asPath
        println "Test Classpath\n${testClassPath.split(';')*.trim().join('\n')}"
    }
}

// build scanning should not ask for license agreement approve on each run
if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

