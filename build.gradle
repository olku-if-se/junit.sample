import org.fusesource.jansi.Ansi

import java.text.MessageFormat

plugins {
    id 'java'
    id 'jacoco'
    id 'org.gosu-lang.gosu' version '+'
    id "com.dorongold.task-tree" version "+"
    id 'idea'
}

repositories {
    mavenCentral()
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

group = 'org.example'
version = '1.0-SNAPSHOT'
description = 'Gosu Junit Gradle Project Example'

// force Java 11 for project code (stay close to Guidewire environment)
java.toolchain.languageVersion = JavaLanguageVersion.of(11)
compileJava.options.release = 11
targetCompatibility = 11
sourceCompatibility = 11

// Include Gosu source sets Into Compilation Process
sourceSets {
    main {
        gosu {
            srcDirs = ['src/main/gosu']
            filter.include '**/*.gs', '**/*.gsx', '**/*.gst', '**/*.gsp'
            filter.excludes = []
        }
    }
    test {
        gosu {
            srcDirs = ['src/test/gosu']
            filter.include '**/*.gs', '**/*.gsx', '**/*.gst', '**/*.gsp'
            filter.excludes = []
        }
    }
}

dependencies {
    // Gosu Language dependencies
    implementation('org.gosu-lang.gosu:gosu-core:+') {
        exclude group: 'systems.manifold'
    }
    testImplementation('org.gosu-lang.gosu:gosu-test:+') {
        exclude group: 'systems.manifold'
    }

    // JUnit 5 dependencies
    testImplementation platform('org.junit:junit-bom:5.13.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // JUnit 4 compatibility
    testImplementation("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // Mocks, https://site.mockito.org/
    testImplementation "org.mockito:mockito-core:5.+"

    // Manifold - is Gosu Core (latest: 2025.1.22, used: 2024.1.38)
    implementation 'systems.manifold:manifold:+'
}

test {
    useJUnitPlatform()

    // Use the number of available processors, or set a fixed number
    //maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    jacoco {
        enabled = true
        includes = ['**/*']
    }

    testLogging {
        events("failed")
    }

    finalizedBy(jacocoTestReport)

    // Custom test result logging with timing feedback
    afterTest { desc, result ->
        def duration = result.endTime - result.startTime
        def resultType = result.resultType.toString()

        def resultColor = resultType == "SUCCESS" ? Ansi.Color.GREEN :
                resultType == "SKIPPED" ? Ansi.Color.YELLOW : Ansi.Color.RED

        def timeColor = duration > 5000 ? Ansi.Color.RED :
                duration >= 1000 ? Ansi.Color.YELLOW : Ansi.Color.GREEN

        def template = new MessageFormat(Ansi.ansi()
                .a("Test ")
                .bold().a("{0}").boldOff()
                .a(" > ")
                .fgBrightDefault().a("{1}").reset()
                .a(" - ")
                .fg(resultColor).a("{2}").reset()
                .a(", took: ")
                .fg(timeColor).a("{3} ms")
                .reset().toString())

        println template.format([desc.className, desc.methodName, resultType, duration].toArray())

        // on failure we should print STDOUT and STDERR of the test
        if (resultType == "FAILED") {
            println "STDOUT:\n${result.standardOutput}"
            println "STDERR:\n${result.errorOutput}"
        }
    }
}

jacocoTestReport {
    dependsOn test // Ensure tests are run before generating the report

    reports {
        xml.required = !project.hasProperty("NoReports")
        csv.required = !project.hasProperty("NoReports")
        html.required = !project.hasProperty("NoReports")
    }
}

tasks.withType(Test).configureEach {
    if (project.hasProperty("NoReports")) {
        reports.junitXml.required = false
        reports.html.required = false
    }
}

// Gosu Configuration
compileGosu {
    // TBD: Gosu compiler options can be set here
    gosuOptions.verbose = true

    // include Java classpath in Gosu compilation, so we can reference Java classes in Gosu Code
    // classpath += files(tasks.named('compileJava').get().destinationDir)
}

compileTestGosu {
    // TBD: Gosu test compiler options can be set here

    // include Java test classes into Gosu test compilation, so we can reference Java classes in Gosu Test Code
    // classpath += files(tasks.named('compileTestJava').get().destinationDir)
}

gosudoc {
    // TBD: Gosu documentation options can be set here
}

// Configure IDEA to recognize Gosu source directories
idea {
    module {
        sourceDirs += file('src/main/gosu')
        testSources.from(file('src/test/gosu'))
    }
}

// examine the order of classes in the classpath
tasks.register('printTestClassPath') {
    doLast {
        def testClassPath = sourceSets.test.runtimeClasspath.asPath
        println "Test Classpath\n${testClassPath.split(';')*.trim().join('\n')}"
    }
}